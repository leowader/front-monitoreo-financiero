import React, { useEffect } from "react";
import * as echarts from "echarts";

const TreemapChart = () => {
  useEffect(() => {
    const container = document.getElementById("treemap-chart");
    const chart = echarts.init(container);

    const datos = {
      ADI: [
        183.21, 185.39, 181.32, 177.17, 175.49, 175.75, 177.22, 176.66, 177.48,
        173.69, 178.16, 180.33, 182.56, 181.57, 181.78, 182.43, 181.54, 182.18,
        178.46, 177.47, 177.65, 175.05, 176.17, 179.67, 178.14, 179.72, 178.75,
        176.08, 173.84, 175.48, 175.43, 172.34, 172.81, 176.41, 175.09, 175.43,
        171.51, 173.79, 172.1, 173.97, 173.32, 175.97, 174.92, 173.6, 171.07,
        172.75, 172.61, 171.27, 168.72, 166.52, 163.87, 164.93, 159.79, 160.86,
        160.57, 155.88, 157.33, 159.24, 164.34, 167.92, 167.57, 168.11, 168.91,
        167.13, 172.32,
      ],
      AMD: [
        107.57, 111.98, 111.35, 107.19, 104.44, 105.45, 108.22, 105.66, 109.43,
        101.8, 102.25, 102.61, 105.92, 106.59, 105.72, 109.45, 110.78, 109.28,
        106.59, 106.09, 105.32, 105.31, 107.71, 106.63, 101.49, 102.37, 101.61,
        100.34, 96.11, 96.2, 97.38, 95.96, 98.07, 102.76, 102.82, 103.27,
        100.08, 104.07, 102.91, 107.24, 106.97, 109.01, 108.31, 108.79, 105.09,
        106.46, 105.14, 102.17, 102.4, 101.81, 100.01, 101.67, 96.055, 93.67,
        96.43, 96.18, 98.5, 108.04, 107.83, 112.25, 111.75, 113.45, 113.59,
        113.49, 118.59,
      ],
      AVGO: [
        829.76, 854.1, 842.52, 832.99, 827.1, 825.84, 865.14, 855.79, 876.58,
        854.46, 851.82, 861.08, 889.93, 892.28, 922.89, 872.52, 872.17, 872.27,
        857.03, 857.55, 859.14, 844.52, 852.93, 871.64, 851.68, 850, 849.2,
        830.57, 808.36, 829.08, 833.89, 816.19, 816.81, 832, 830.58, 834.95,
        814.83, 823.81, 823.86, 845.26, 855.88, 858.41, 874.56, 905.6, 883.18,
        902.57, 884.4, 887.03, 867.83, 853.63, 862.22, 881.11, 849.63, 826.75,
        838.36, 841.25, 841.37, 852.94, 871.3, 882.68, 880.83, 897.82, 911.13,
        911.38, 957.52,
      ],
      INTC: [
        34.89, 35.68, 34.77, 33.53, 32.58, 32.75, 33.14, 32.89, 33.98, 32.59,
        33.25, 33.62, 34.31, 34.53, 35.14, 36.61, 36.71, 36.98, 38.18, 38.01,
        38.59, 38.86, 38.71, 38.67, 37.88, 37.99, 36.34, 34.69, 34.65, 34.18,
        34.29, 33.83, 34.61, 35.18, 35.55, 35.46, 35.69, 35.93, 35.89, 36.19,
        36.06, 36.43, 36.88, 36.84, 35.97, 36.56, 36.06, 35.64, 35.67, 34.92,
        33.85, 34.59, 32.83, 32.52, 35.54, 35.69, 36.5, 37.29, 37.7, 38.14,
        37.95, 38.77, 37.92, 37.8, 38.86,
      ],
      MCHP: [
        81.77, 83.04, 80.89, 79.77, 79.1, 79.41, 80.52, 80.23, 80.59, 77.76,
        79.37, 80.29, 81.97, 81.99, 81.84, 82.29, 81.56, 81.06, 79.1, 78.78,
        79.46, 78.37, 78.67, 80.03, 77.63, 77.95, 77.78, 76.72, 76.09, 77.08,
        77.43, 76.05, 76.5, 78.61, 78.05, 78.37, 76.75, 77.77, 77.35, 79.54,
        79.43, 80.78, 81.23, 80.51, 77.46, 78.95, 78.91, 77.99, 76.79, 75.36,
        74.39, 76.03, 71.38, 72.76, 72.26, 70.66, 71.29, 71.04, 73.6, 76.43,
        75.12, 75.31, 75.36, 73.7, 77.56,
      ],
      MPWR: [
        502.17, 524.66, 518.89, 493.91, 485.35, 482.29, 498.89, 500.63, 519.45,
        488.01, 489.08, 493.87, 512.82, 515.14, 521.21, 524.92, 528.72, 523.18,
        506.14, 500.87, 486.16, 473.94, 470.36, 479.17, 464.23, 463.19, 457.78,
        452.86, 440.38, 449.29, 453.15, 444.54, 441.18, 451.92, 462, 459.34,
        448.93, 457.17, 451.76, 473.68, 476.02, 490, 502.04, 493.04, 475.75,
        483.12, 476.56, 461.06, 433.75, 420.04, 413.49, 418, 399.73, 404.06,
        405.93, 404, 441.74, 456.56, 471.72, 492.93, 493.54, 492.56, 492.94,
        482.06, 504.58,
      ],
      MU: [
        64.37, 68.28, 65.33, 64.22, 63.56, 63.59, 63.96, 63.41, 65.19, 63.69,
        63.72, 65.31, 66.68, 68.09, 69.94, 70.39, 70.29, 70.41, 69.87, 70.18,
        70.03, 70.31, 70.85, 71.79, 69.88, 70.5, 70.71, 69.68, 67.9, 68.88,
        68.58, 67.94, 68.21, 65.2, 68.03, 67.96, 67.83, 68.11, 69.05, 69.96,
        69.48, 69.07, 70.21, 69.75, 69.21, 69.08, 69, 69.14, 67.53, 67.22,
        66.88, 68.07, 66.5, 64.53, 65.65, 66.07, 66.87, 69.4, 70.44, 72.58,
        72.92, 72.8, 72.28, 73.57, 75.36,
      ],
      NVDA: [
        408.55, 437.53, 439.4, 434.86, 433.435, 432.99, 469.67, 456.68, 471.16,
        471.63, 460.18, 468.35, 487.84, 492.64, 493.55, 485.09, 485.48, 470.61,
        462.41, 455.72, 451.78, 448.7, 454.85, 455.81, 439, 439.66, 435.2,
        422.39, 410.17, 416.1, 422.22, 419.11, 424.68, 430.89, 434.99, 447.82,
        435.17, 440.41, 446.88, 457.62, 452.73, 457.98, 468.06, 469.45, 454.61,
        460.95, 439.38, 421.96, 421.01, 413.87, 429.75, 436.63, 417.79, 403.26,
        405, 411.61, 407.8, 423.25, 435.06, 450.05, 457.51, 459.55, 465.74,
        469.5, 483.35,
      ],
      NXPI: [
        204.2, 207.25, 201.74, 196.74, 194.53, 196.57, 201.62, 199.66, 201.1,
        193.82, 196.2, 199.23, 205.16, 205.88, 205.72, 209.96, 207.57, 207.79,
        204.01, 203.05, 203.5, 199.5, 200.4, 202.69, 197.38, 199.29, 199.14,
        194.96, 194, 196.79, 198.12, 194.99, 196.7, 200.53, 199.92, 200.19,
        195.2, 198.19, 195.45, 199.02, 198.12, 201.75, 203.46, 202.36, 194.5,
        199.78, 197.72, 193.2, 187.93, 185.76, 182.35, 183.61, 175.94, 179.56,
        179.13, 170.18, 172.43, 172.52, 177.59, 181.55, 182.8, 185.8, 183.35,
        180.33, 186.67,
      ],
      ON: [
        94.57, 97.12, 94.13, 92.18, 90.03, 90.73, 93.03, 92.37, 92.88, 89.96,
        92.32, 93.63, 97.61, 98.85, 98.46, 99.4, 99.31, 99.49, 98.51, 97.92,
        97.85, 96.79, 96.83, 96.47, 93.1, 94.6, 94.24, 92.84, 90.93, 93.81,
        94.46, 90.15, 92.05, 94.05, 92.95, 93.37, 89.76, 89.99, 88.17, 90.93,
        90.93, 93.32, 95.14, 93.05, 89.14, 91.69, 91.69, 89.59, 87.01, 84.83,
        83.61, 85.09, 81.16, 82.79, 83.52, 65.34, 62.64, 64.84, 66.63, 68.25,
        66.23, 66.8, 66.25, 64.35, 67.38,
      ],
      QCOM: [
        114.61, 114.02, 111.68, 110.15, 110.08, 110.1, 110.68, 109.47, 111.17,
        108.51, 110.32, 111.68, 113.78, 113.27, 114.53, 115.385, 116.55, 114.68,
        106.4, 106.14, 110.28, 111.23, 112.64, 114.04, 113.14, 112.75, 110.72,
        109.22, 107.96, 107.68, 110.43, 109.72, 109.19, 111.1, 111.06, 111.1,
        110.19, 109.85, 109.8, 110.88, 111.8, 112.31, 111.12, 111.455, 108.66,
        110.51, 112.2, 110.98, 111.28, 108.63, 108.66, 109.39, 104.78, 105.62,
        106.46, 107.83, 108.99, 110.89, 117.36, 119.52, 119.93, 120.72, 120.06,
        120.1, 124.21,
      ],
      SWKS: [
        107.24, 108.83, 105.5, 103.55, 103.84, 104.7, 107.04, 105.27, 107.23,
        104.23, 105.39, 106.2, 107.78, 107.98, 108.74, 109.68, 109.13, 106.18,
        98.38, 99.38, 98.23, 96.91, 96.64, 99.24, 98.21, 98.5, 97.82, 96.33,
        96.28, 96.42, 97.76, 95.93, 96.3, 97.89, 98.59, 98.25, 97.03, 97.57,
        96.76, 98.32, 98.22, 98.3, 97.88, 96.95, 94.6, 95.84, 95.66, 94.22,
        93.58, 92.19, 90.46, 91.52, 88.57, 88.61, 88.23, 86.45, 86.74, 87.06,
        89.5, 91.05, 90, 89.36, 87.9, 86.5, 90.03,
      ],
      TXN: [
        166.2, 170.48, 168.16, 165.72, 165.76, 166.49, 167.95, 167.11, 169.83,
        165.59, 167.81, 168.7, 170.69, 169.23, 168.06, 169.83, 169.74, 168.05,
        164.71, 164.66, 165.84, 163.49, 164.36, 166.05, 162.62, 162.83, 163.14,
        162.1, 160.4, 160.31, 160.9, 157.96, 158.14, 159.09, 159.01, 159.95,
        157.25, 157.97, 155.11, 157, 156.72, 157.66, 157.33, 155, 152.75, 154.3,
        154.26, 151.82, 150.94, 147.81, 146.32, 146.92, 141.79, 144.01, 143.12,
        140.5, 142.01, 143.17, 147.31, 150.23, 147.5, 146.59, 145.22, 143.27,
        147.19,
      ],
    };

    const seriesData = Object.entries(datos).map(([nombre, datos]) => ({
      name: nombre,
      value: datos[datos.length - 1], // Usamos el último valor como el valor del Treemap
      data: datos, // Agregamos el conjunto completo de datos como propiedad
    }));

    const options = {
      series: [
        {
          type: "treemap",
          data: seriesData,
          label: {
            show: true,
            formatter: "{b}",
          },
          emphasis: {
            label: {
              show: true,
            },
          },
          breadcrumb: {
            show: false,
          },
          roam: false,
        },
      ],
      tooltip: {
        formatter: function (params) {
          //   const seriesName = params.seriesName;
          const dataName = params.name;
          const value = params.value;
          const data = params.data.data; // Accedemos al conjunto completo de datos

          if (data && data.length >= 2) {
            const lastValue = data[data.length - 1];
            const prevValue = data[data.length - 2];
            const percentageChange =
              ((lastValue - prevValue) / prevValue) * 100;

            return (
              dataName +
              ": " +
              value.toFixed(2) +
              "<br/>Antepenúltimo valor: " +
              prevValue.toFixed(2) +
              "<br/>Último valor: " +
              lastValue.toFixed(2) +
              "<br/>Porcentaje de cambio: " +
              percentageChange.toFixed(2) +
              "%"
            );
          } else {
            return "Datos no disponibles";
          }
        },
      },
    };

    chart.setOption(options);

    return () => {
      chart.dispose();
    };
  }, []);

  return (
    <div id="treemap-chart" style={{ width: "100%", height: "500px" }}></div>
  );
};

export default TreemapChart;
